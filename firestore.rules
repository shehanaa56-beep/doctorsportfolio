// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Default: deny everything (safe baseline)
    match /{document=**} {
      allow read, write: if false;
    }

    // site documents: allow authenticated reads so the client can check site/admins
    match /site/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // services: public read, admin-only write
    match /services/{docId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // testimonials: public read, admin-only write
    match /testimonials/{docId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // blogs: public read, admin-only write
    match /blogs/{docId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // faqs: public read, admin-only write
    match /faqs/{docId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // caseStudies: public read, admin-only write
    match /caseStudies/{docId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // features: public read, admin-only write
    match /features/{docId} {
      allow read: if true;
      allow write: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }

    // contacts: allow public creates (forms), admin reads/updates/deletes
    match /contacts/{docId} {
      allow create: if true;
      allow read: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
      allow update, delete: if request.auth != null
        && (request.auth.token.admin == true
            || (exists(/databases/$(database)/documents/site/admins)
                && get(/databases/$(database)/documents/site/admins).data.emails.hasAny([request.auth.token.email])));
    }
  }
}
